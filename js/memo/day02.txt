데이터 타입(typeof()) === 원시타입
   - 숫자 타입(number) : 42(정수), 3.14(실수), ...
   - 논리 타입(bool) : true, false
   - 문자열 타입(string) : "안녕", "하세요", "35", 'a', "A", ...
   - 객체 레퍼런스 타입(object) : Object, Array, Math, Date,...
   - undefined : 타입이 정해지지 않은 것을 의미한다.
   - null : 값이 정해지지 않은 것을 의미한다.

변수
   - var 키워드: 함수의 영역만 영역으로 판단한다.
   - let 키워드: 모든 영역을 영역으로 판단한다. (ES6)

상수
   - const 키워드: 값을 변경시킬 수 없다.
   
   6-1 상수를 사용하는 이유
      1. 의미 없는 값이 의미를 부여하기 위해서
      2. 오타 방지

지역변수와 전역변수
   변수의 사용 범위(scope)에 따라서 전역변수(global)와 지역변수(local)로 나뉜다.
   전역 변수: 영역 밖에서 선언된 변수
   지역 변수: 영역 안에서 선언된 변수

호이스팅(단골 면접 질문)
   - 자바스크립트 함수가 실행되기 전에 함수 내부에 필요한 변수 값들을 모아서
   유효 범위의 최상단에 선언하는 것을 말한다. 다시말해, 함수 또는 변수가 실행되기 전에
   자바스크립트 Paser가 실행전 해당하는 코드를 모두 훑고 영역 내에 존재하는 값들을
   모두 끌어올리는 것이다.
   - 실제 메모리에는 변화가 없고, 선언문을 미리 실행한다고 생각하면 된다.

========================================================================
연산자
1. 최우선 연산자 "()"
   - 10 * 4 + 4
   - 10 * (4 + 4)

2. 단항 연산자(항이 1개)
   1) ++ : 값이 1씩 증가
   2) -- : 값이 1씩 감소

   전위 연산자
      - 전위형 : ++a
      - 후위형 : a++

   3) ! : 낫 연산자, 할당된 값을 부정하는 연산자
   
3. 이항 연산자(항 2개)
   - 산술 연산자 : "+", "-", "*", "/", "%"
      1) / : 몫을 구하는 연산자
      2) % : 나머지를 구하는 연산자

   - 할당 연산자(누적복합연산자)
      1) += : 값이 더해지면서 누적
      2) -= :   값이 빠지면서 누적
      3) *= :   값이 곱해지면서 누적
      4) /= :   값이 나눠지면서 누적

4. 쉬프트 연산자(거의 안쓴다.)
   - a << b 
   - [피연산자] << 비트 수
   - 피 연산자를 명시한 비트 수 만큼 이동시킨다
   - ~ 쉬프트 부정연산자
 
5. 관계 연산자
   == : 동등 비교
   === : 일치 비교
   != : 부등 비교
   !== : 불일치 비교
   >, < : 초과, 미만
   >=, <= : 이상, 이하

6. 논리 연산자
   1) || 논리합(or) : 둘 중에 하나라도 true면 true
      - 조건식 || 값으로 사용되었을 때, 조건식이 false인 경우 초기값으로 사용된다.

   2) && 논리곱(and) : 둘 다 true이어야만 true
      - 자바스크립트에서는 선행 조건식이 false일 때 뒤 값을 실행하지 않는다.
      - 선행 조건식이 true면 뒤에 값을 반환한다.

   3) ?? 병합연산자 : null 또는 undefined일 때 오른쪽 값을 반환한다.

   
7. 삼항 연산자
   조건식 ? 조건식이 true일 때 값 : 조건식이 false일 때 값

8. 대입 연산자
   a = b
